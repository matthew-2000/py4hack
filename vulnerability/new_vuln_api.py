import requests
from datetime import datetime, timedelta

keyword = input("Inserisci il nome del software o l'ID CVE da cercare: ")
giorni = int(input("Inserisci il numero di giorni da cui cercare (max 120, default: 30): ") or 30)

if giorni > 120:
    print("‚ö†Ô∏è L'API NVD consente un massimo di 120 giorni di ricerca. Impostato a 120 giorni.")
    giorni = 120

end_date = datetime.now()
start_date = end_date - timedelta(days=giorni)
pub_start_date = start_date.strftime("%Y-%m-%dT00:00:00.000Z")
pub_end_date = end_date.strftime("%Y-%m-%dT23:59:59.999Z")

url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={keyword}&resultsPerPage=5&pubStartDate={pub_start_date}&pubEndDate={pub_end_date}"

response = requests.get(url)
response.raise_for_status()
data = response.json()

if 'vulnerabilities' in data:
    cve_list = data['vulnerabilities']
    if not cve_list:
        print(f"‚ùå Nessuna CVE trovata per '{keyword}' negli ultimi {giorni} giorni.")
        exit()
            
    print(f"\nüîç CVE pi√π recenti per '{keyword}' (ultimi {giorni} giorni):\n")
    for cve_item in cve_list:
        cve = cve_item['cve']
        cve_id = cve['id']
                
        # Ottieni la descrizione in inglese
        descriptions = cve.get('descriptions', [])
        description = next((d['value'] for d in descriptions if d['lang'] == 'en'), "Descrizione non disponibile")
                
        # Ottieni la gravit√† (se disponibile)
        severity = "Non disponibile"
        if 'metrics' in cve and 'cvssMetricV2' in cve['metrics']:
            severity = cve['metrics']['cvssMetricV2'][0].get('baseSeverity', 'Non disponibile')
        
        # Data di pubblicazione
        published_date = cve.get('published', 'Data non disponibile')
        
        print(f"üìå CVE: {cve_id}\n   - Pubblicata il: {published_date}\n   - Descrizione: {description}\n   - Gravit√†: {severity}\n")
         
else:
    print("‚ùå Errore: Struttura della risposta API non valida.")