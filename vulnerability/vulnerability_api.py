import requests
from datetime import datetime, timedelta

def search_recent_cve(cpe, results_limit=5, days=30):
    if days > 120:
        print("‚ö†Ô∏è L'API NVD consente un massimo di 120 giorni di ricerca. Impostato a 120 giorni.")
        days = 120

    # Calcola l'intervallo di date
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)

    # Formatta le date nel formato richiesto da NVD
    pub_start_date = start_date.strftime("%Y-%m-%dT00:00:00.000Z")
    pub_end_date = end_date.strftime("%Y-%m-%dT23:59:59.999Z")

    url = (f"https://services.nvd.nist.gov/rest/json/cves/2.0?"
           f"cpeName={cpe}&resultsPerPage={results_limit}")
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        if 'vulnerabilities' in data:
            cve_list = data['vulnerabilities']
            if not cve_list:
                print(f"‚ùå Nessuna CVE trovata per '{cpe}' negli ultimi {days} giorni.")
                return
            
            print(f"\nüîç CVE pi√π recenti per '{cpe}' (ultimi {days} giorni):\n")
            for cve_item in cve_list:
                cve = cve_item['cve']
                cve_id = cve['id']
                
                # Ottieni la descrizione in inglese
                descriptions = cve.get('descriptions', [])
                description = next((d['value'] for d in descriptions if d['lang'] == 'en'), "Descrizione non disponibile")
                
                # Ottieni la gravit√† (se disponibile)
                severity = "Non disponibile"
                if 'metrics' in cve and 'cvssMetricV2' in cve['metrics']:
                    severity = cve['metrics']['cvssMetricV2'][0].get('baseSeverity', 'Non disponibile')

                # Data di pubblicazione
                published_date = cve.get('published', 'Data non disponibile')

                print(f"üìå CVE: {cve_id}\n   - Pubblicata il: {published_date}\n   - Descrizione: {description}\n   - Gravit√†: {severity}\n")

        else:
            print("‚ùå Errore: Struttura della risposta API non valida.")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Errore durante la richiesta: {e}")

def read_cpe_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            cpe_list = [line.strip() for line in file if line.strip()]
        return cpe_list
    except FileNotFoundError:
        print(f"‚ùå Errore: Il file '{file_path}' non √® stato trovato.")
        return []

cpe_list = read_cpe_from_file("servizi.txt")
if cpe_list:
    giorni = int(input("Inserisci il numero di giorni da cui cercare (max 120, default: 30): ") or 30)
    for cpe in cpe_list:
        search_recent_cve(cpe, days=giorni)
else:
    print("‚ùå Nessuna CPE trovata nel file 'servizi.txt'.")